@inject IStringLocalizer<FileResource> fileLocalizer

<style>
    .modal-body i {
        font-size: 4vh;
    }

        .modal-body i:hover {
            cursor: pointer;
            box-shadow: 0 0 0 0.5vh white, 0 0 0 0.65vh #258cfb;
        }
    .title {
        transition: 200ms color;
    }
    .file-picker {
        width: 4vh;
        height: 4vh;
    }
    .file-select {
        height: 5vh;
        display: flex;
        flex-direction: row;
        align-items: center;
    }
    .file-name {
        border: 1px solid lightgray;
        border-radius: 5px;
        position: relative;
        bottom: 0.5vh;
    }
</style>

<div class="modal fade show border-radius-lg" tabindex="-1"
     id="messageBoxModal" style="display:block;">
    <div class="modal-dialog">
        <div class="modal-content bg-paleyellow shadow-card">
            @if (!string.IsNullOrEmpty(Title))
            {
                <div class="modal-header border-0 bg-gradient-faded-dark text-center">
                    <h6 class="modal-title text-center text-white text-sm font-weight-bold">@Title</h6>
                    <button type="button" class="btn-close text-sm" data-bs-dismiss="modal" @onclick="@ModalCancel" aria-label="Close"></button>
                </div>
            }
            <div class="modal-body">
                <p class="text-xs mt-3 mb-3">@fileLocalizer["SaveFileText"]</p>
                <div class="file-select">
                    <label for="filePicker" class="label file-picker">
                        <i class="fa fa-file-text-o"></i>
                        <InputFile id="filePicker" class="invisible" OnChange="async (e) => await LoadFile(e)"></InputFile>
                    </label>
                    <InputText class="text-xs bg-white w-auto ms-1 me-0 p-2 file-name" @bind-Value="fileName" @ref=inputForFocus >
                    </InputText>
                    <label id="fileExtension" class="text-xs m-0">@FileExtension </label>
                </div>
                <p class="text-xs text-info mt-2">@fileLocalizer["DownloadFolderOnly"]</p>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-xs text-danger">@errorMessage</p>
                }
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-outline-dark file-button" @onclick="@ModalCancel" data-bs-dismiss="modal">@ButtonCancelText</button>
                <button type="button" class="btn btn-info text-xs file-button" @onclick="@ModalOk">@ButtonSaveText</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Action { get; set; }
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public string? SuggestedFileName { get; set; }
    [Parameter]
    public string? FileDescription { get; set; }
    [Parameter]
    public string? FileExtension { get; set; }
    [Parameter]
    public string? ButtonSaveText { get; set; }
    [Parameter]
    public string? ButtonCancelText { get; set; }
    [Parameter]
    public EventCallback<SaveFileResponse> OnSelectFile { get; set; }

    private string errorMessage { get; set; } = string.Empty;
    private string fileName { get; set; } = string.Empty;

    private InputText inputForFocus;

    protected override void OnInitialized()
    {
        fileName = SuggestedFileName ?? string.Empty;
        var bo = ButtonSaveText;
        var bc = ButtonCancelText;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (inputForFocus?.Element != null)
        {
            await inputForFocus.Element.Value.FocusAsync();
        }
    }

    private async Task ModalCancel()
    {
        await OnSelectFile.InvokeAsync(new SaveFileResponse { Selected = false, FileName = string.Empty });
    }

    private async Task ModalOk()
    {
        if(!string.IsNullOrEmpty(fileName))
            await OnSelectFile.InvokeAsync(new SaveFileResponse { Selected = true, FileName = fileName + FileExtension});
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        errorMessage = string.Empty;
        if (e.File.Name.Contains(FileExtension))
        {
            fileName = e.File.Name;
            fileName = fileName.Replace(FileExtension, "");
            StateHasChanged();
        }
        else
        {
            errorMessage = @fileLocalizer["InvalidFileType"];
            fileName = string.Empty;
            StateHasChanged();
        }
    }

}
