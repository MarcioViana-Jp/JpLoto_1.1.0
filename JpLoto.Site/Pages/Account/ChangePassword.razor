@page "/changepassword"
@inject IAccountService accountService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<AuthResource> authLocalizer
@attribute [Authorize]

<PageTitle>Change Password</PageTitle>

<main class="main-content  mt-0">
    <section>
        <div class="page-header align-items-start min-vh-80" style="background-image: url('site_images/lottery-3846567_640.webp.jpg');">
            <span class="mask bg-gradient-dark opacity-6"></span>
            <div class="container ctn-changepassword my-auto">
                <div class="row">
                    <div class="col-lg-4 col-md-8 col-12 mx-auto">
                        <div class="card z-index-0 fadeIn3 fadeInBottom">
                            <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                                <div class="bg-gradient-primary shadow-primary border-radius-lg py-1 pe-1">
                                    <h6 class="text-white font-weight-bolder text-center mt-2 mb-0">@authLocalizer["_CHANGE_PASSWORD_TITLE"]</h6>
                                </div>
                            </div>
                            <div class="card-body">
                                <EditForm Model="changePasswordRequest" OnValidSubmit="HandleChangePassword">
                                    <DataAnnotationsValidator />
                                    <div class="input-group input-group-outline mt-3">
                                        <label for="CurrentPassword" class="form-label font-8 mt-1">@authLocalizer["CurrentPassword"]</label>
                                        <InputText id="CurrentPassword" type="password" style="text-align:center;" @bind-Value="changePasswordRequest.CurrentPassword" class="form-control my-2 font-10" /> 
                                    </div>
                                    <ValidationMessage For="@(() => changePasswordRequest.CurrentPassword)" class="font-9 text-danger" />
                                    <div class="input-group input-group-outline mt-3">
                                        <label for="Password" class="form-label font-8 mt-1">@authLocalizer["NewPassword"]</label>
                                        <InputText id="Password" type="password" style="text-align:center;" @bind-Value="changePasswordRequest.NewPassword" class="form-control my-2 font-10" />
                                    </div>
                                    <ValidationMessage For="@(() => changePasswordRequest.NewPassword)" class="font-9 text-danger" />
                                    <div class="input-group input-group-outline mt-3">
                                        <label for="ConfirmPassword" class="form-label font-8 mt-1">@authLocalizer["ConfirmNewPassword"]</label>
                                        <InputText id="ConfirmPassword" type="password" style="text-align:center;" @bind-Value="changePasswordRequest.ConfirmPassword" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => changePasswordRequest.ConfirmPassword)" class="font-9 text-danger" />
                                    <div class="text-center">
                                        <button type="submit" class="btn btn-lg bg-gradient-primary btn-lg w-100 mt-4 mb-0 font-8">@authLocalizer["UpdatePassword"]</button>
                                    </div>
                                    <p class="mt-4 font-9 text-center">                                        
                                        <a href="@returnUrl" class="text-xs text-primary text-gradient font-weight-bold">@authLocalizer["ClickHereToReturn"]</a>
                                    </p>
                                </EditForm>
                                <div class="mt-2">
                                    @if (errorMessages.Count > 0)
                                    {
                                        foreach (var msg in errorMessages)
                                        {
                                            <label class="text-danger font-9">@msg</label>
                                            <br />
                                        }
                                    }
                                </div>
                            </div> <!-- Card body-->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private async Task<bool> IsAuthenticated() => (await authenticationStateTask).User.Identity.IsAuthenticated;

    //private async Task<bool> IsSupportAuthenticated() => (await authenticationStateTask).User.IsInRole("Support");

    private ChangePasswordRequest changePasswordRequest = new();
    private List<string> errorMessages = new();
    private string returnUrl = string.Empty;
    private string userName { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task<string> GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            return user.FindFirst(c => c.Type == "name")?.Value;
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task HandleChangePassword()
    {
        errorMessages = new();
        if (await accountService.IsUserAuthenticated())
        {
            changePasswordRequest.UserName = await GetCurrentUser();
            var response = await accountService.ChangePassword(changePasswordRequest);
            if (response.Success)
                navigationManager.NavigateTo(returnUrl);
            else
                errorMessages = response.Errors;
        }
        else
            errorMessages.Add("Usuário não logado no momento. - 2o IF");
    }

}
