@page "/miniloto"

@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IFileService fileService
@inject IStringLocalizer<ButtonResource> buttonLocalizer
@inject IStringLocalizer<LotoResource> lotoLocalizer
@inject IStringLocalizer<ButtonResource> buttonLocalizer
@inject IJSRuntime jsRuntime
@attribute [Authorize]

<PageTitle>MiniLoto</PageTitle>

<div class="container ctn-loto">
    <div class="ctn-loto-title bg-info">
        <h2 class="text-md text-white bold mt-2 me-auto">@lotoLocalizer["TITLE_MINILOTO"] - @lotoLocalizer["TITLE_SELECTNUMBERS"]</h2>
        <ButtonClose_Circle />
    </div>
    <div class="row ctn-numbers bg-gradient-miniloto">
        <div class="numbers-card col-lg-6 col-md-6 col-sm-12">
            <div class="numbers-zone">
                @foreach (var number in loto.ButtonNumbers)
                {
                    <button class="btn-numbers @GetBtnNumberClass(number.Indice)"
                    @onmousedown="(() => NumberPressed(number))"
                    @onmouseup="(() => NumberReleased(number))">
                        @number.NumberTxt
                    </button>
                }
            </div>
            <div class="options">
                <div class="options-zone">
                    <div class="buttoncard @disabledClass(!limitaNumbersVariaveis || loto.QuantityOfSelectedNumbers == variableNumbers)" @onclick="CriaSugestoes">
                        <div class="action-icon">
                            <i class="fas fa-magic text-blue"></i>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["Suggestions"]
                        </div>
                    </div>
                    <div class="buttoncard @disabledClass(loto.QuantityOfSuggestedNumbers < 1)" @onclick="AplicaSugestoes">
                        <div class="action-icon">
                            <i class="fas fa-hand-sparkles text-blue"></i>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["AplicaSugestoes"]
                        </div>
                    </div>
                    <div class="buttoncard @disabledClass(loto.QuantityOfSuggestedNumbers < 1)" @onclick="LimpaSugestoes">
                        <div class="action-icon">
                            <i class="fas fa-trash-alt text-red"></i>
                            @* <span class="badge"><i class="fas fa-magic text-red"></i></span> *@
                        </div>
                        <div class="buttoncard-text text-red font-10">
                            @lotoLocalizer["ClearSuggestions"]
                        </div>
                    </div>
                    <div class="buttoncard @disabledClass(loto.QuantityOfSelectedNumbers < 1 &&
                                                          loto.QuantityOfFixedNumbers < 1 &&
                                                          loto.QuantityOfBlockedNumbers < 1)"
                                                          @onclick="(args) => LimpaTudo(true)">
                        <div class="action-icon">
                            <i class="fas fa-times text-red"></i>
                            @* <span class="badge"><i class="fas fa-times text-red"></i></span> *@
                        </div>
                        <div class="buttoncard-text text-red font-10">
                            @lotoLocalizer["ClearAll"]
                        </div>
                    </div>
                    <div class="buttoncard" @onclick="CarregaDoArquivo">
                        <div class="action-icon">
                            <i class="fas fa-file-alt text-blue"></i>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["Load"]
                        </div>
                    </div>
                </div>
                <div class="options-zone">
                    <div class="minicard shadow-dark mb-2">
                        <div class="minicard-title bg-darkgreen text-white bc-lightgreen font-8">
                            <input class="form-check-input mt-1" type="checkbox" @bind="limitaNumbersVariaveis"
                                   aria-label="Checkbox for following text input">
                            <label class="mt-1 text-white font-10">@lotoLocalizer["LimitNumbers"]</label>
                        </div>
                        <div class="minicard-body bc-lightgreen bg-palegreen text-green font-8">
                            <label class="font-10 text-darkgreen">@lotoLocalizer["Maximum"]</label>
                            <input type="number" disabled="@(!limitaNumbersVariaveis)"
                            @bind-value="variableNumbers" min="@(loto.NumbersPerCard - loto.QuantityOfFixedNumbers + 1)"
                                   class="form-control p-0 font-10" id="variableNumbers">
                        </div>
                    </div>
                    <div class="minicard shadow-dark mb-2">
                        <div class="minicard-title bg-darkgreen text-white bc-lightgreen font-8">
                            <input class="form-check-input mt-1" type="checkbox" @bind="limitaCombinacoes"
                                   aria-label="Checkbox for following text input">
                            <label class="mt-1 text-white font-10">@lotoLocalizer["LimitCombinations"]</label>
                        </div>
                        <div class="minicard-body bc-lightgreen bg-palegreen text-green font-8">
                            <label class="font-10 text-darkgreen">@lotoLocalizer["Maximum"]</label>
                            <input type="number" disabled="@(!limitaCombinacoes)"
                            @bind-value="quantidadeDeCombinacoes" max="@loto.GetCombinationCount()"
                                   class="form-control p-0 font-10" id="quantidadeDeCombinacoes">
                        </div>
                    </div>
                </div>
                <div class="options-zone">
                    <div class="minicard shadow-dark mb-2">
                        <div class="minicard-title bg-darkgreen text-white bc-lightgreen font-8">
                            <input class="form-check-input mt-1" type="checkbox" @bind="mantemCombinacoesAnteriores"
                                   aria-label="Checkbox for following text input">
                            <label class="mt-1 text-white font-10">@lotoLocalizer["PreviousCombinations"]</label>
                        </div>
                        <div class="minicard-body bc-lightgreen bg-palegreen text-green font-8">
                            @lotoLocalizer["KeepPrevious"]
                        </div>
                    </div>
                    <div class="minicard shadow-dark mb-2">
                        <div class="minicard-title bg-darkgreen text-white bc-lightgreen font-8">
                            <input class="form-check-input mt-1" type="checkbox" @bind="geraCombinacoesAleatorias"
                                   aria-label="Checkbox for following text input">
                            <label class="mt-1 text-white font-10">@lotoLocalizer["RandomCombinations"]</label>
                        </div>
                        <div class="minicard-body bc-lightgreen bg-palegreen text-green font-8">
                            @lotoLocalizer["GenerateRandom"]
                        </div>
                    </div>
                </div>
                <div class="options-zone justify-content-center mt-2">
                    <button class="btn btn-primary"
                            disabled="@(loto.QuantityOfSelectedNumbers < variableNumbers || loto.QuantityOfSelectedNumbers < loto.NumbersPerCard)"
                            @onclick="CriaCombinacoes">
                            @buttonLocalizer["GenerateCombinations"]
                    </button>
                </div>
                <div class="options-zone">
                    <div class="buttoncard @disabledClass(false)" @onclick="DefineFilters">
                        <div class="action-icon">
                            <i class="fas fa-traffic-light text-blue"></i>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["Filters"]
                        </div>
                    </div>
                    <div class="buttoncard @disabledClass(loto.SelectedNumbers.Length < 1 && loto.FixedNumbers.Length < 1)" @onclick="SalvaCombinacoes">
                        <div class="action-icon">
                            <i class="fas fa-save text-blue"></i>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["Save"]
                        </div>
                    </div>
                    <div class="buttoncard @disabledClass(Combinacoes.Count < 1)" @onclick="(args) => LimpaTudo(true)">
                        <div class="action-icon">
                            <i class="fas fa-print text-blue"></i>
                            <span class="badge position-absolute bottom-0 start-100 translate-middle">
                                <i class="far fa-file-pdf text-lightblue"></i>
                            </span>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["Print"]
                        </div>
                    </div>
                    <div class="buttoncard @disabledClass(false)" @onclick="ConfigurePrinting">
                        <div class="action-icon">
                            <i class="fas fa-cog text-blue"></i>
                            <span class="badge position-absolute bottom-0 start-100 translate-middle">
                                <i class="fas fa-print text-lightblue"></i>
                            </span>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["ConfigurePrinting"]
                        </div>
                    </div>
                    <div class="buttoncard @disabledClass(Combinacoes.Count < 1)" @onclick="CheckResultsHandle">
                        <div class="action-icon">
                            <i class="fas fa-search-dollar text-blue"></i>
                        </div>
                        <div class="buttoncard-text font-10">
                            @lotoLocalizer["CheckResult"]
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="combinations-card col-lg-6 col-md-6 col-sm-12">
            <div class="combinations-title font-12 bg-darkgreen text-white bold">
                <div class="title-message font-10 text-white">
                    <i class="fas fa-grip-horizontal font-10 text-white"></i>
                    @mensagemTituloCombinacao
                </div>
                <div class="btn-page-group">
                    <div @onclick="PaginaAnterior" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PagePrevious"]">
                        <i class="fas fa-angle-left btn-page text-white"></i>
                    </div>
                    <div @onclick="PaginaInicial" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PageFirst"]">
                        <i class="fas fa-angle-double-left btn-page text-white"></i>
                    </div>
                    @* <label class="label-page text-white font-9">@lotoLocalizer["Page"] @paginacaoStatus</label> *@
                    <label class="label-page text-white font-9 mt-2">P:@paginacaoStatus</label>
                    <div @onclick="PaginaFinal" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PageLast"]">
                        <i class="fas fa-angle-double-right btn-page text-white"></i>
                    </div>
                    <div @onclick="ProximaPagina" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PageNext"]">
                        <i class="fas fa-angle-right btn-page text-white"></i>
                    </div>
                </div>
            </div>
            <div class="combinations-zone bg-palegreen bc-lightgreen shadow-dark mb-3">
                <div class="combinations-header bc-darkgreen">
                    <div class="col txt-50 font-10 text-darkgreen">@lotoLocalizer["Order"]</div>
                    <div class="col txt-120 font-10 text-darkgreen">@lotoLocalizer["Numbers"]</div>
                    <div class="col txt-50 font-10 text-darkgreen">@lotoLocalizer["Recycle"]</div>
                </div>
                @foreach (var card in CombinacoesPaginadas)
                {
                    <div class="row combinations-item">
                        <div class="col txt-50 font-10">@(card.Id.ToString("000000"))</div>
                        <div class="col txt-120 font-10">@card.NumbersText</div>
                        <div class="col txt-50 font-10 d-inline-flex">
                            <div class="btn-delete" role="button" @onclick="() => DeletaCombinacao(card)"
                                 data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["DeletePermanent"]">
                                <i class="fas fa-trash-alt text-red font-12"></i>
                            </div>
                            <div class="btn-recycle" @onclick="() => ReciclaCombinacao(card)"
                                 data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["RecycleItem"]">
                                <i class="fas fa-recycle text-red btn-recycle font-12"></i>
                            </div>
                        </div>
                    </div>
                    <hr class="mt-0 mb-0 text-green" />
                }
            </div>
        </div>

    </div>

    <div class="ctn-recycling bg-gradient-recycling mt-3">
        <div class="recycle-title bg-darkred font-10">
            <div class="title-message text-white">
                <i class="fas fa-recycle text-white font-16"></i>
                @mensagemTituloLixeira
            </div>
            <div class="btn-page-group">
                <div @onclick="PaginaAnteriorLixeira" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PagePrevious"]">
                    <i class="fas fa-angle-left btn-page text-white"></i>
                </div>
                <div @onclick="PaginaInicialLixeira" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PageFirst"]">
                    <i class="fas fa-angle-double-left btn-page text-white"></i>
                </div>
                @* <label class="label-page text-white">@lotoLocalizer["Page"] @paginacaoStatusLixeira</label> *@
                <label class="label-page text-white font-9 mt-2">P:@paginacaoStatusLixeira</label>
                <div @onclick="PaginaFinalLixeira" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PageLast"]">
                    <i class="fas fa-angle-double-right btn-page text-white"></i>
                </div>
                <div @onclick="ProximaPaginaLixeira" data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["PageNext"]">
                    <i class="fas fa-angle-right btn-page text-white"></i>
                </div>
            </div>
        </div>
        <div class="recycle-zone bc-darkred">
            <div class="recycle-header bc-darkred">
                <div class="col txt-50 text-darkred font-10">@lotoLocalizer["Order"]</div>
                <div class="col txt-100 text-darkred font-10">@lotoLocalizer["Numbers"]</div>
                <div class="col txt-50 text-darkred font-10">@lotoLocalizer["Restore"]</div>
            </div>
            @foreach (var card in LixeiraPaginada)
            {
                <div class="row recycle-item bc-darkred text-darkred">
                    <div class="col txt-50 font-10">@(card.Id.ToString("000000"))</div>
                    <div class="col txt-120 font-10">@card.NumbersText</div>
                    <div class="col txt-50 font-10 d-inline-flex">
                        <div class="btn-delete" role="button" @onclick="() => DeletaCombinacaoReciclada(card)"
                             data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["DeletePermanent"]">
                            <i class="fas fa-trash-alt text-red"></i>
                        </div>
                        <div class="btn-restore" role="button" @onclick="() => RestauraCombinacao(card)"
                             data-bs-toggle="tooltip" data-bs-placement="top" title="@lotoLocalizer["RestoreItem"]">
                            <i class="fas fa-trash-restore text-green"></i>
                        </div>
                    </div>
                </div>
                <hr class="mt-0 mb-0 text-darkred" />
            }
        </div>
    </div>
</div>

@if (OpenMessageBox)
{
    <MessageBox Title=@messageBox.Title
                BodyText=@messageBox.BodyText
                ButtonAcceptText=@messageBox.ButtonAcceptText
                ButtonCancelText=@messageBox.ButtonCancelText
                Action=@messageBox.Action
                OnClose="@OnCloseMessageBox">
    </MessageBox>
}

@if (OpenFileBox)
{
    <OpenFile Title=@fileManager.Title
              FileExtension=@fileManager.FileExtension
              SuggestedFileName=@fileManager.SuggestedFileName
              FileDescription=@fileManager.FileDescription
              ButtonOpenText=@fileManager.ButtonOpenText
              ButtonCancelText=@fileManager.ButtonCancelText
              OnOpenFile="@OnOpenFile">
    </OpenFile>
}

@if (OpenSaveFileBox)
{
    <SaveFileAs Title=@fileManager.Title
                FileExtension=@fileManager.FileExtension
                SuggestedFileName=@fileManager.SuggestedFileName
                FileDescription=@fileManager.FileDescription
                ButtonSaveText=@fileManager.ButtonSaveText
                ButtonCancelText=@fileManager.ButtonCancelText
                OnSelectFile="@OnSelectFile">
    </SaveFileAs>
}

@code {
    private MiniLoto loto { get; set; } = new MiniLoto();
    private string mensagemTituloCombinacao
    {
        get => $"{Combinacoes.Count} {lotoLocalizer["Combinations"]}";
    }
    private string mensagemTituloLixeira
    {
        get => $"{Lixeira.Count} {lotoLocalizer["Combinations"]}";
    }
    private MessageBoxOptions? messageBox { get; set; }
    private bool OpenMessageBox { get; set; } = false;

    private FileManagerOptions? fileManager { get; set; }
    private bool OpenFileBox { get; set; } = false;
    private bool OpenSaveFileBox { get; set; } = false;

    private const int linhasPorPagina = 20;
    private int paginaAtual = 1;
    private int paginaAtualLixeira = 1;
    private int ultimaPagina { get => (Combinacoes.Count / linhasPorPagina) + (Combinacoes.Count % linhasPorPagina > 0 ? 1 : 0); }
    private int ultimaPaginaLixeira { get => (Lixeira.Count / linhasPorPagina) + (Lixeira.Count % linhasPorPagina > 0 ? 1 : 0); }
    private string paginacaoStatus { get; set; } = string.Empty;
    private string paginacaoStatusLixeira { get; set; } = string.Empty;

    private string filePath { get; set; } = string.Empty;
    private string returnUrl { get; set; } = string.Empty;
    private string[] btnNumberClasses = { "btn-numbers-free", "btn-numbers-selected", "btn-numbers-fixed", "btn-numbers-suggested" };
    private string btnNumberClass { get; set; } = string.Empty;

    private List<Card> Combinacoes { get; set; } = new();
    private List<Card> CombinacoesPaginadas { get; set; } = new();
    private List<Card> Lixeira { get; set; } = new();
    private List<Card> LixeiraPaginada { get; set; } = new();

    private long _quantidadeDeCombinacoes;
    private long quantidadeDeCombinacoes
    {
        get => limitaCombinacoes ? _quantidadeDeCombinacoes : _quantidadeDeCombinacoes = loto.GetCombinationCount();
        set => _quantidadeDeCombinacoes = value;
    }
    private int _variableNumbers;
    private int variableNumbers
    {
        get => _variableNumbers;
        set
        {
            _variableNumbers = value;
            RefreshSelectedNumbers(_variableNumbers);
        }
    }
    private DateTime numberPressionada { get; set; }
    private DateTime numberLiberada { get; set; }
    private bool _limitaNumbersVariaveis { get; set; }
    private bool limitaNumbersVariaveis
    {
        get => _limitaNumbersVariaveis;
        set
        {
            _limitaNumbersVariaveis = value;
            loto.ReleaseSuggestedNumbers();
        }
    }
    private bool _limitaCombinacoes { get; set; }
    private bool limitaCombinacoes
    {
        get => _limitaCombinacoes;
        set => _limitaCombinacoes = value;
    }

    private bool mantemCombinacoesAnteriores { get; set; }
    private bool geraCombinacoesAleatorias { get; set; }

    private string disabledClass(bool condicao) => condicao ? "disabled" : "";

    protected override void OnInitialized()
    {
        fileManager = new();
        loto = new();

        quantidadeDeCombinacoes = 0;
        variableNumbers = 6;
        limitaCombinacoes = false;
        limitaNumbersVariaveis = true;
        mantemCombinacoesAnteriores = false;
        geraCombinacoesAleatorias = false;

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private void OnCloseMessageBox(bool accepted)
    {
        OpenMessageBox = false;
        messageBox.Accepted = accepted;
        StateHasChanged();
        if (accepted)
        {
            switch (messageBox.Action)
            {
                case MessageBoxAction.DeleteCombination:
                    Combinacoes.Remove((Card)messageBox.Object);
                    ObtemPaginacao(paginaAtual, linhasPorPagina);
                    break;

                case MessageBoxAction.DeleteRecycledCombination:
                    Lixeira.Remove((Card)messageBox.Object);
                    ObtemPaginacaoLixeira(paginaAtualLixeira, linhasPorPagina);
                    break;

                case MessageBoxAction.ClearAll:
                    loto.ReleaseAll();
                    ClearCombinations();
                    break;
            }
        }
    }

    private async Task OnSelectFile(SaveFileResponse fileResponse)
    {
        OpenSaveFileBox = false;
        fileManager.Selected = fileResponse.Selected;
        StateHasChanged();
        if (fileResponse.Selected && !string.IsNullOrEmpty(fileResponse.FileName))
        {
            LotoFile lotoFile = new()
            {
                LotoType = loto.LotoFileInfo.Nome,
                SelectedNumbers = LotoBase.ArrayToText(loto.SelectedNumbers, LotoType.Undefined),
                FixedNumbers = LotoBase.ArrayToText(loto.FixedNumbers, LotoType.Undefined),
                Combinations = Combinacoes
            };
            await fileService.SaveFileAsync(lotoFile, fileResponse.FileName);
        }
    }

    private async Task OnOpenFile(OpenFileResponse fileResponse)
    {
        OpenFileBox = false;
        fileManager.Selected = fileResponse.Open;
        StateHasChanged();

        LotoFile? lotoFile = await fileService.ReadFileAsync(fileResponse.File);
        if (lotoFile != null)
        {
            LimpaTudo(false);
            loto.SelectNumbers(lotoFile.SelectedNumbers);
            loto.FixNumbers(lotoFile.FixedNumbers);
            loto.Combinations = lotoFile.Combinations;
            CarregaCombinacoes(loto.Combinations);
        }
    }

    private string GetBtnNumberClass(int index)
    {
        return btnNumberClasses[loto.Numbers[index]];
    }

    private void CriaSugestoes()
    {
        loto.CreateSuggestions(variableNumbers);
    }

    private void AplicaSugestoes()
    {
        loto.ApplySuggestions();
    }

    private void LimpaSugestoes()
    {
        loto.ReleaseSuggestedNumbers();
    }

    private void ReciclaCombinacao(Card card)
    {
        Lixeira.Add(card);
        Combinacoes.Remove(card);
        ObtemPaginacao(paginaAtual, linhasPorPagina);
        ObtemPaginacaoLixeira(paginaAtualLixeira, linhasPorPagina);
    }

    private void RestauraCombinacao(Card card)
    {
        Combinacoes.Add(card);
        Lixeira.Remove(card);
        ObtemPaginacao(paginaAtual, linhasPorPagina);
        ObtemPaginacaoLixeira(paginaAtualLixeira, linhasPorPagina);
    }

    private void DeletaCombinacao(Card card)
    {
        messageBox = new();
        messageBox.Action = MessageBoxAction.DeleteCombination;
        messageBox.Object = card;
        messageBox.Title = @lotoLocalizer["ConfirmationRequired"];
        messageBox.BodyText = $"{@lotoLocalizer["ConfirmDelete"]} #{card.Id:000000}?";
        messageBox.ButtonAcceptText = @buttonLocalizer["Delete"];
        messageBox.ButtonCancelText = @buttonLocalizer["Cancel"];
        OpenMessageBox = true;
        StateHasChanged();
    }

    private void DeletaCombinacaoReciclada(Card card)
    {
        messageBox = new();
        messageBox.Action = MessageBoxAction.DeleteRecycledCombination;
        messageBox.Object = card;
        messageBox.Title = @lotoLocalizer["ConfirmationRequired"];
        messageBox.BodyText = $"{@lotoLocalizer["ConfirmDelete"]} #{card.Id:000000}?";
        messageBox.ButtonAcceptText = @buttonLocalizer["Delete"];
        messageBox.ButtonCancelText = @buttonLocalizer["Cancel"];
        OpenMessageBox = true;
        StateHasChanged();
    }

    private void LimpaTudo(bool requireConfirmation = true)
    {
        messageBox = new();
        messageBox.Action = MessageBoxAction.ClearAll;
        if (requireConfirmation)
        {
            messageBox.Title = @lotoLocalizer["ConfirmationRequired"];
            messageBox.BodyText = $"{@lotoLocalizer["ConfirmClearAll"]}?";
            messageBox.ButtonAcceptText = @buttonLocalizer["ClearAll"];
            messageBox.ButtonCancelText = @buttonLocalizer["Cancel"];
            OpenMessageBox = true;
        }
        else
        {
            OnCloseMessageBox(true);
        }
        StateHasChanged();
    }

    private void CriaCombinacoes()
    {
        var response = loto.CreateCombinations((int)quantidadeDeCombinacoes, mantemCombinacoesAnteriores, geraCombinacoesAleatorias);
        CarregaCombinacoes(response.Combinations);
    }

    private void CarregaCombinacoes(List<Card> combinacoes)
    {
        Combinacoes = combinacoes;
        PaginaInicial();
        PaginaInicialLixeira();
    }

    private void ClearCombinations()
    {
        loto.ClearCombinations();
        Combinacoes = new();
        CombinacoesPaginadas = new();
        Lixeira = new();
        LixeiraPaginada = new();
        paginacaoStatus = "";
        paginacaoStatusLixeira = "";
    }

    private void PaginaInicial()
    {
        ObtemPaginacao(1, linhasPorPagina);
    }

    private void PaginaInicialLixeira()
    {
        ObtemPaginacaoLixeira(1, linhasPorPagina);
    }

    private void PaginaFinal()
    {
        if (Combinacoes.Count > 0)
            ObtemPaginacao(ultimaPagina, linhasPorPagina);
    }

    private void PaginaFinalLixeira()
    {
        if (Lixeira.Count > 0)
            ObtemPaginacao(ultimaPaginaLixeira, linhasPorPagina);
    }

    private void PaginaAnterior()
    {
        if (Combinacoes.Count > 0)
            ObtemPaginacao(paginaAtual - 1, linhasPorPagina);
    }

    private void PaginaAnteriorLixeira()
    {
        if (Lixeira.Count > 0)
            ObtemPaginacao(paginaAtualLixeira - 1, linhasPorPagina);
    }

    private void ProximaPagina()
    {
        if (Combinacoes.Count > 0)
            ObtemPaginacao(paginaAtual + 1, linhasPorPagina);
    }

    private void ProximaPaginaLixeira()
    {
        if (Lixeira.Count > 0)
            ObtemPaginacao(paginaAtualLixeira + 1, linhasPorPagina);
    }

    private void ObtemPaginacao(int pagina, int linhas)
    {
        if (Combinacoes.Count == 0)
        {
            CombinacoesPaginadas = new();
            return;
        }
        if (pagina < 1 || pagina > ultimaPagina) return;
        int linhaInicial = pagina * linhas - linhas;

        if ((linhaInicial + linhas) <= Combinacoes.Count)
            CombinacoesPaginadas = Combinacoes.GetRange(linhaInicial, linhas);
        else
            CombinacoesPaginadas = Combinacoes.GetRange(linhaInicial, Combinacoes.Count - linhaInicial);

        CombinacoesPaginadas = CombinacoesPaginadas.OrderBy(x => x.Id).ToList();
        paginacaoStatus = $" {pagina}/{ultimaPagina}";
        paginaAtual = pagina;
    }

    private void ObtemPaginacaoLixeira(int pagina, int linhas)
    {
        if (Lixeira.Count == 0)
        {
            LixeiraPaginada = new();
            return;
        }
        if (pagina < 1 || pagina > ultimaPaginaLixeira) return;
        int linhaInicial = pagina * linhas - linhas;

        if ((linhaInicial + linhas) <= Lixeira.Count)
            LixeiraPaginada = Lixeira.GetRange(linhaInicial, linhas);
        else
            LixeiraPaginada = Lixeira.GetRange(linhaInicial, Lixeira.Count - linhaInicial);

        LixeiraPaginada = LixeiraPaginada.OrderBy(x => x.Id).ToList();

        paginacaoStatusLixeira = $" {pagina}/{ultimaPaginaLixeira}";
        paginaAtualLixeira = pagina;
    }

    private void RefreshSelectedNumbers(int dezVar)
    {
        loto.RefreshSelectedNumbers(dezVar);
    }

    private void NumberPressed(LotoNumber number)
    {
        numberPressionada = DateTime.Now;
    }

    private void NumberReleased(LotoNumber number)
    {
        numberLiberada = DateTime.Now;
        var tempo = numberLiberada - numberPressionada;
        if (tempo.Seconds >= 1)
        {
            loto.SetAsFixed(number.Indice);
        }
        else
        {
            if (!limitaNumbersVariaveis || loto.QuantityOfSelectedNumbers < variableNumbers)
                loto.SetAsSelected(number.Indice);
            else
                loto.SetAsFree(number.Indice);
        }
        if (!limitaNumbersVariaveis)
            variableNumbers = loto.QuantityOfSelectedNumbers;
    }

    private async Task SalvaCombinacoes()
    {
        if (loto.SelectedNumbers.Length < 1 && loto.FixedNumbers.Length < 1)
            return;
        fileManager = new();
        fileManager.Title = lotoLocalizer["SaveMiniLoto"];
        fileManager.FileExtension = loto.LotoFileInfo.Extensao;
        fileManager.SuggestedFileName = loto.LotoFileInfo.NomeSugerido;
        fileManager.FileDescription = loto.LotoFileInfo.Descricao;
        fileManager.ButtonSaveText = buttonLocalizer["Save"];
        fileManager.ButtonCancelText = buttonLocalizer["Cancel"];
        OpenSaveFileBox = true;
        StateHasChanged();
    }

    private async Task CarregaDoArquivo()
    {
        fileManager = new();
        fileManager.Title = lotoLocalizer["OpenMiniLoto"];
        fileManager.FileExtension = loto.LotoFileInfo.Extensao;
        fileManager.SuggestedFileName = loto.LotoFileInfo.NomeSugerido;
        fileManager.FileDescription = loto.LotoFileInfo.Descricao;
        fileManager.ButtonOpenText = buttonLocalizer["Open"];
        fileManager.ButtonCancelText = buttonLocalizer["Cancel"];
        OpenFileBox = true;
        StateHasChanged();
    }

    private void ConfigurePrinting()
    {
        navigationManager.NavigateTo("printConfigPage?returnUrl=/minilotopage", false, true);
    }

    private void DefineFilters()
    {
        navigationManager.NavigateTo($"lotoFiltersPage/{LotoType.MiniLoto}?returnUrl=/minilotopage", false, true);
    }

    private async Task CheckResultsHandle()
    {
        // Provisorio - simula leitura do resultado
        var result = new MiniLotoResult()
            {
                DrawNumber = 1,
                Numbers = "01,05,13,27,31",
                Bonus = "15",
                Date = DateTime.Now,
                Prize1Value = 1_000_000,
                Prize2Value = 500_000,
                Prize3Value = 100_000,
                Prize4Value = 15_000
            };

        var prizesResult = loto.CheckResults(result);
        await localStorage.SetItemAsync<ResultResponse<MiniLotoResult, MiniLotoPrize>>("jplMiniPrizes", prizesResult);
        navigationManager.NavigateTo($"/minilotocheckresult");
    }
}
