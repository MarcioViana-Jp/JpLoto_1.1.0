@page "/admin/minilotoresults2"
@using JpLoto.Application.Dto;
@inject IMiniLResultRepository resultRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@* @attribute [Authorize] *@
@implements IDisposable

<h5>MiniLotoResults</h5>

@if (resultRepository.Results == null)
{
    <span>Loading results...</span>
}
else
{
    <button class="btn btn-primary float-end" @onclick="AddResult">
        <i class="oi oi-plus btn-crud"></i> Add result
    </button>
    <table class="table">
        <thead>
            <tr>
                @* <th></th> *@
                <th>Id#</th>
                <th>Drawn#</th>
                <th>Date</th>
                <th>Numbers</th>
                <th>Bonus</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="resultRepository.Results" Context="result">
                <tr>
                    <td>@result.Id</td>
                    <td>@result.DrawNumber</td>
                    <td>@result.Numbers</td>
                    <td>@result.Bonus</td>
                    <td>@result.Id</td>

                    <td>
                        <button class="btn btn-primary" style="margin:3px;" @onclick="(() => EditResult(result.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                        @if (!result.IsNew)
                        {
                            <button class="btn btn-danger" style="margin:3px;" @onclick="(() => DeleteResult(result.Id, result.DrawNumber))">
                                <i class="oi oi-circle-x"></i>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-danger" style="margin:3px;" @onclick="CancelEditing">
                                <i class="oi oi-circle-x"></i>
                            </button>
                        }
                    </td>
                </tr>
                @if (result.Editing || result.IsNew)
                {
                    <tr>
                        <td>@result.Prize1Value</td>
                        <td>@result.DrawNumber</td>
                        <td>@result.Numbers</td>
                        <td>@result.Bonus</td>
                        <td>@result.Id</td>

                        <td>
                            <button class="btn btn-primary" style="margin:3px;" @onclick="(() => EditResult(result.Id))">
                                <i class="oi oi-pencil"></i>
                            </button>
                            @if (!result.IsNew)
                            {
                                <button class="btn btn-danger" style="margin:3px;" @onclick="(() => DeleteResult(result.Id, result.DrawNumber))">
                                    <i class="oi oi-circle-x"></i>
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-danger" style="margin:3px;" @onclick="CancelEditing">
                                    <i class="oi oi-circle-x"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
            </Virtualize>
        </tbody>
    </table>
}

@code {

    MiniLotoResultDto editingResult = new();

    protected override async Task OnInitializedAsync()
    {
        var results = await resultRepository.GetAllAsync();
        resultRepository.OnChange += StateHasChanged;
    }

    private void AddResult()
    {
        NavigationManager.NavigateTo("admin/add-minilotoresult");
    }

    private void EditResult(int id)
    {
        NavigationManager.NavigateTo($"admin/edit-minilotoresult/{id}");
    }

    public void Dispose()
    {
        resultRepository.OnChange -= StateHasChanged;
    }

    async void DeleteResult(int id, int drawnNumber)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Do you really want to delete '{drawnNumber.ToString("0000")}'?"))
        {
            await resultRepository.RemoveByIdAsync(id);
        }
    }

    private async Task CancelEditing()
    {
        editingResult = new MiniLotoResultDto();
        await resultRepository.GetAllAsync();
    }

}
