@page "/resendemail"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountService accountService
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<PageTitle>Resend Confirmation Email</PageTitle>

<div class="container-fluid p-5 m-0 bg-white">
    <h5>Resend Confirmation Email</h5>
    @if (claims.Count() > 0)
    {
        if (!isSent)
        {
            <h6>Hi @currentUserName, please click on link below to receive a new confirmation email:</h6>
            <p>
                <button class="btn btn-link" style="padding: 0; margin: 0;" @onclick="HandleResendConfirmationEmail">Click here to resend confirmation email.</button>
                <br />
                Or <a href="@returnUrl" class="text-primary text-gradient font-weight-bold">click here</a> to return
            </p>

        }
        else
        {
            <h6>Hi @currentUserName, a new confirmation was sent to your registered email:</h6>
            <p>>
                <button class="btn btn-link" @onclick="() => navigationManager.NavigateTo(returnUrl)">Click here to return.</button>
            </p>
        }
    }
    else
    {
        <h5>Hi Dude, You're not logged in...</h5>
        <p>
            <button class="btn btn-link" @onclick="() => navigationManager.NavigateTo(returnUrl)">Click here to return.</button>
        </p>
    }
</div>

@code {
    private string? currentUserName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private string returnUrl = string.Empty;
    private bool isSent = false;

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }

    }


    private async Task<string> GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            currentUserName = user.FindFirst(c => c.Type == "name")?.Value;
        }
        else
        {
            currentUserName = "The user is NOT authenticated.";
        }

        return currentUserName;
    }


    private async Task HandleResendConfirmationEmail()
    {
        await accountService.ResendConfirmationEmail(new EmailRequest { Email = currentUserName });
        isSent = true;
        //navigationManager.NavigateTo(returnUrl, true);
    }


}