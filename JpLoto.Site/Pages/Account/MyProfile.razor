@page "/myprofile"
@using JpLoto.Application.Dto;
@using JpLoto.Site.Interfaces.Services;
@inject IAccountService accountService
@inject IMyProfileRepository myProfileRepository
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<UserDetailResource> userDetailLocalizer
@attribute [Authorize]

<PageTitle>My Profile</PageTitle>

<main class="main-content  mt-0">
    <div class="container-fluid px-2 px-md-4">
        <div class="page-header min-height-200 border-radius-xl mt-4" style="background-image: url('../site_images/backgrounds/lottery-3846567_640.webp.jpg');">
            <span class="mask  bg-gradient-primary  opacity-6"></span>
        </div>
        <div class="card card-body mx-3 mx-md-4 mt-n6">
            <div class="row mb-2"> @* gx-4 *@
                <div class="d-flex align-items-center justify-content-center m5">
                    <div class="mt-4 flex-column">
                        <h6 class="mb-1">
                            <span><i class="fa fa-user fa-lg me-2"></i></span>
                            @currentUserName
                        </h6>
                        <p class="mb-0 font-weight-normal text-sm">
                            Trial period
                        </p>
                    </div>
                </div>

                <hr class="horizontal light bg-dark mt-2 mb-2 w-100">
            </div>
            <div class="row">
                <div class="row">
                    <div class="col-12 col-xl-5">
                        <div class="card card-plain h-100">
                            <div class="card-header pb-0 p-3">
                                <div class="row">
                                    <div class="col-md-8 d-flex align-items-center">
                                        <h6 class="mb-0 me-auto">@userDetailLocalizer["ProfileInformation"]</h6>
                                        <a href="javascript:;">
                                            <i class="fas fa-user-edit text-12 @iconColorClass" 
                                               data-bs-toggle="tooltip" data-bs-placement="top" title="Edit Profile"
                                               @onclick="EditModeToggle">
                                            </i>
                                        </a>
                                    </div>
                                    <div class="col-md-4 text-end">
                                    </div>
                                </div>
                            </div>
                            <div class="card-body p-3">
                                <p class="text-sm">
                                    Clique no botão ao lado para alterar informações do seu perfil. Para concluir, clique no botão [atualizar].
                                </p>
                                <hr class="horizontal gray-light my-4">
                                <EditForm Model="userDetailDto" OnValidSubmit="HandleUpdate">
                                    <DataAnnotationsValidator />
                                    <div class="input-group input-group-outline mt-3">
                                        <label for="firstname" class="form-label text-xs">@userDetailLocalizer["FirstName"]</label>
                                        <InputText id="firstname" style="text-align:center;" @bind-Value="userDetailDto.FirstName" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => userDetailDto.FirstName)" class="text-xs text-danger" />

                                    <div class="input-group input-group-outline mt-3">
                                        <label for="lastname" class="form-label text-xs">@userDetailLocalizer["LastName"]</label>
                                        <InputText id="lastname" style="text-align:center;" @bind-Value="userDetailDto.LastName" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => userDetailDto.LastName)" class="text-xs text-danger" />

                                    <div class="input-group input-group-outline mt-3">
                                        <label for="phone" class="form-label text-xs">@userDetailLocalizer["Phone"]</label>
                                        <InputText id="phone" style="text-align:center;" @bind-Value="userDetailDto.Phone" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => userDetailDto.Phone)" class="text-xs text-danger" />

                                    <div class="input-group input-group-outline mt-3">
                                        <label for="postalcode" class="form-label text-xs">@userDetailLocalizer["PostalCode"]</label>
                                        <InputText id="postalcode" style="text-align:center;" @bind-Value="userDetailDto.PostalCode" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => userDetailDto.PostalCode)" class="text-xs text-danger" />

                                    <div class="input-group input-group-outline mt-3">
                                        <label for="state" class="form-label text-xs">@userDetailLocalizer["State"]</label>
                                        <InputText id="state" style="text-align:center;" @bind-Value="userDetailDto.State" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => userDetailDto.State)" class="text-xs text-danger" />

                                    <div class="input-group input-group-outline mt-3">
                                        <label for="city" class="form-label text-xs">@userDetailLocalizer["City"]</label>
                                        <InputText id="city" style="text-align:center;" @bind-Value="userDetailDto.City" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => userDetailDto.City)" class="text-xs text-danger" />
                                        
                                    <div class="input-group input-group-outline mt-3">
                                        <label for="address" class="form-label text-xs">@userDetailLocalizer["Address"]</label>
                                        <InputText id="address" style="text-align:center;" @bind-Value="userDetailDto.Address" class="form-control my-2" />
                                    </div>
                                    <ValidationMessage For="@(() => userDetailDto.Address)" class="text-xs text-danger" />

                                    <div class="text-center mb-2">
                                        <button type="submit" class="btn bg-gradient-primary w-100 my-4">@userDetailLocalizer["Update"]</button>
                                    </div>
                                </EditForm>
                                <div class="mt-2">
                                    @if (errorMessages.Count > 0)
                                    {
                                        foreach (var msg in errorMessages)
                                        {
                                            <label class="text-danger text-xs">@msg</label>
                                            <br />
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-xl-3">
                        <div class="card card-plain h-100">
                            <div class="card-header pb-0 p-3">
                                <h6 class="mb-0">App Settings</h6>
                            </div>
                            <div class="card-body p-3">
                                <h6 class="text-uppercase text-body text-xs font-weight-bolder">Security </h6>
                                <ul class="list-group">
                                    <li class="list-group-item border-0 px-0">
                                        <div class="form-check form-switch ps-0">
                                            <input class="form-check-input ms-auto" type="checkbox" id="flexSwitchCheckDefault" checked>
                                            <label class="form-check-label text-body ms-3 text-truncate w-80 mb-0" for="flexSwitchCheckDefault">Enable/Disable 2FA</label>
                                        </div>
                                    </li>
                                </ul>
                                <h6 class="text-uppercase text-body text-xs font-weight-bolder mt-4">Notifications</h6>
                                <ul class="list-group">
                                    <li class="list-group-item border-0 px-0">
                                        <div class="form-check form-switch ps-0">
                                            <input class="form-check-input ms-auto" type="checkbox" id="flexSwitchCheckDefault3">
                                            <label class="form-check-label text-body ms-3 text-truncate w-80 mb-0" for="flexSwitchCheckDefault3">New launches and projects</label>
                                        </div>
                                    </li>
                                    <li class="list-group-item border-0 px-0 pb-0">
                                        <div class="form-check form-switch ps-0">
                                            <input class="form-check-input ms-auto" type="checkbox" id="flexSwitchCheckDefault5">
                                            <label class="form-check-label text-body ms-3 text-truncate w-80 mb-0" for="flexSwitchCheckDefault5">Subscribe to newsletter</label>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    private UserDetailDto? userDetailDto { get; set; } = new();
    private List<string> errorMessages = new();
    private string returnUrl = string.Empty;
    private string currentUserName { get; set; }
    private bool isNewProfile = false;
    private bool isEditingMode = false;
    private string editingClass { get => isEditingMode ? null : "disabled"; }
    private string iconColorClass { get => isEditingMode ? "text-green" : "text-gray"; }

    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
        currentUserName = await accountService.GetCurrentUserName();
        var userId = await accountService.GetUserIdByEmailAsync(currentUserName);

        errorMessages = new();

        if (userId is null)
            errorMessages.Add($"Something went wrong. User '{currentUserName}' not found!");
        else
        {
            var userDetail = await myProfileRepository.GetByUserIdAsync(userId);
            if(userDetail == null || userDetail.Id == 0)
            {
                isNewProfile = true;
                userDetailDto = new();
                userDetailDto.UserId = userId;
            }
            else
            {
                isNewProfile = false;
                userDetailDto = new UserDetailDto(userDetail);
            }
        }
    }

    private async Task HandleUpdate()
    {
        errorMessages = new(); // TODO - Add/Update Responses
        userDetailDto.UpdateDate = DateTime.Now;
        userDetailDto.IsActive = true;

        if(isNewProfile)
            await myProfileRepository.AddAsync(userDetailDto.ConvertToAddRequest());
        else
            await myProfileRepository.UpdateAsync(userDetailDto.ConvertToUpdateRequest());
    }

    private void EditModeToggle()
    {
        isEditingMode = !isEditingMode;
    }

}


