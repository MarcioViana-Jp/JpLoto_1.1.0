@using System.Text;
@using JpLoto.Application.Interfaces.Services;
@using JpLoto.Application.Settings;
@using Microsoft.Extensions.Options;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IStringLocalizer<CultureResource> cultureLocalizer
@inject IAppConfigService configService
@inject HttpClient http

<li class="nav-item dropdown pe-2 d-flex align-items-center ms-3 me-3">
    <a href="javascript:;" class="nav-link text-body p-0" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="fa fa-globe cursor-pointer"></i>
    </a>
    <ul class="dropdown-menu dropdown-menu-start bg-gradient-light shadow-dark px-2 py-3 me-sm-n4" aria-labelledby="dropdownMenuButton">
        @foreach (var culture in LocalizationSettings.SupportedCultures)
        {
            <li class="mb-2" @onclick="() => SetCulture(culture.Name)">
                <a class="dropdown-item border-radius-md" href="javascript:;">
                    <div class="d-flex py-1">
                        <div class="my-auto">
                            <img src="@flagIconPath(culture.Name)" class="avatar avatar-sm  me-3 ">
                        </div>
                        <div class="d-flex flex-column justify-content-center">
                            <h6 class="text-sm font-weight-normal mb-1">
                                <span class="font-weight-bold">@cultureLocalizer[culture.Name]</span>
                                @if (culture.Name.Substring(0, 2) == CultureInfo.CurrentCulture.Name.Substring(0, 2))
                                {
                                    <span class="ms-2"><i class="fa fa-check text-green font-12"></i></span>
                                }
                            </h6>
                        </div>
                    </div>
                </a>
            </li>
        }
    </ul>
</li>

@code
{
    private string cultureName = string.Empty;
    private string flagIconPath(string culture) => "site_images/country-flags/flag-" + culture + ".png";
    private AppConfiguration appConfiguration;
    private CorsSetting? corsSetting;

    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture != value)
            {
                var uri = new Uri(NavigationManager.Uri)
                    .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
                var cultureEscaped = Uri.EscapeDataString(value.Name);

                var js = (IJSInProcessRuntime)JSRuntime;
                js.InvokeVoid("blazorCulture.set", cultureEscaped);

                NavigationManager.NavigateTo(
                    $"{appConfiguration.CorsSetting.ApiHost}/culture/set?culture={cultureEscaped}&redirectUri={$"{appConfiguration.CorsSetting.AllowedOrigins}" + uri}",
                    forceLoad: true);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Culture = CultureInfo.CurrentCulture;
        appConfiguration = await configService.GetAppConfigurationAsync();
        if (appConfiguration != null)
        {
            await http.GetAsync($"{appConfiguration.CorsSetting.ApiHost}/culture/setserverculture/{Culture.Name}");
        }
    }

    private void SetCulture(string cultureName)
    {
        Culture = CultureInfo.GetCultureInfo(cultureName);
    }

}