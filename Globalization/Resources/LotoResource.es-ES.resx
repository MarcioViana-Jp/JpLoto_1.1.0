<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddSuccess" xml:space="preserve">
    <value>Item added successfully</value>
  </data>
  <data name="AlreadyExists" xml:space="preserve">
    <value>Item already exists</value>
  </data>
  <data name="ApplyFilters" xml:space="preserve">
    <value>Aplicar filtros</value>
  </data>
  <data name="ApplySuggestions" xml:space="preserve">
    <value>Aplicar sugerencias</value>
  </data>
  <data name="Bonus" xml:space="preserve">
    <value>Prima</value>
  </data>
  <data name="BonusLoto6" xml:space="preserve">
    <value>Introduce solo un número de bonificación entre 01 y 43</value>
  </data>
  <data name="BonusLoto7" xml:space="preserve">
    <value>Introduce dos números de bonificación separados por comas</value>
  </data>
  <data name="BonusMiniLoto" xml:space="preserve">
    <value>Introduce solo un número de bonificación</value>
  </data>
  <data name="CancelEditing" xml:space="preserve">
    <value>Cancelar edición</value>
  </data>
  <data name="CheckResult" xml:space="preserve">
    <value>Comprobar resultados</value>
  </data>
  <data name="ClearAll" xml:space="preserve">
    <value>Borrar todo</value>
  </data>
  <data name="ClearSuggestions" xml:space="preserve">
    <value>Borrar sugerencias</value>
  </data>
  <data name="Combinations" xml:space="preserve">
    <value>Combinaciones</value>
  </data>
  <data name="ConfigurePrinting" xml:space="preserve">
    <value>Configurar impresión</value>
  </data>
  <data name="ConfirmDelete" xml:space="preserve">
    <value>Eliminar combinatón</value>
  </data>
  <data name="cr_BonusError" xml:space="preserve">
    <value>El número de bono debe ser diferente de las decenas sorteadas</value>
  </data>
  <data name="cr_DuplicateNumberError" xml:space="preserve">
    <value>Hay uno o más números duplicados</value>
  </data>
  <data name="cr_InputError" xml:space="preserve">
    <value>Entrada invalida</value>
  </data>
  <data name="cr_InvalidBonusLenght" xml:space="preserve">
    <value>Cantidad de números de bonificación no válidos para esta lotería</value>
  </data>
  <data name="cr_InvalidNumbersLenght" xml:space="preserve">
    <value>Cantidad de números no válidos para esta lotería</value>
  </data>
  <data name="cr_MissingParametersError" xml:space="preserve">
    <value>Parámetros faltantes</value>
  </data>
  <data name="cr_Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="cr_OutOfRangeError" xml:space="preserve">
    <value>Hay uno o más números fuera de rango. Verifique los números válidos para esta lotería</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Fecha</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Eliminar</value>
  </data>
  <data name="DeletePermanent" xml:space="preserve">
    <value>Eliminar permanentemente</value>
  </data>
  <data name="DeleteSuccess" xml:space="preserve">
    <value>Item deleted successfully</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="Edition" xml:space="preserve">
    <value>Edición</value>
  </data>
  <data name="Error_InvalidMaxCombinations" xml:space="preserve">
    <value>Combinaciones maximas no válidas</value>
  </data>
  <data name="EvenNumbers" xml:space="preserve">
    <value>Números pares</value>
  </data>
  <data name="FilterCombinations" xml:space="preserve">
    <value>Filtrar combinaciones</value>
  </data>
  <data name="Filters" xml:space="preserve">
    <value>Definir filtros</value>
  </data>
  <data name="GenerateRandom" xml:space="preserve">
    <value>Márquelo para generar combinaciones aleatorias</value>
  </data>
  <data name="InvalidBonus" xml:space="preserve">
    <value>Bono inválido</value>
  </data>
  <data name="InvalidNumbers" xml:space="preserve">
    <value>Números no válidos</value>
  </data>
  <data name="KeepPrevious" xml:space="preserve">
    <value>Márquelo para mantener las combinaciones anteriores</value>
  </data>
  <data name="LimitCombinations" xml:space="preserve">
    <value>Limitar combinaciones</value>
  </data>
  <data name="LimitNumbers" xml:space="preserve">
    <value>Límit de números</value>
  </data>
  <data name="Load" xml:space="preserve">
    <value>Carga</value>
  </data>
  <data name="Loto6" xml:space="preserve">
    <value>Loto6</value>
  </data>
  <data name="Loto7" xml:space="preserve">
    <value>Loto7</value>
  </data>
  <data name="Maximum" xml:space="preserve">
    <value>Máx:</value>
  </data>
  <data name="MaxValue" xml:space="preserve">
    <value>Máximo</value>
  </data>
  <data name="MiniLoto" xml:space="preserve">
    <value>Mini Loto</value>
  </data>
  <data name="MinValue" xml:space="preserve">
    <value>Mínimo</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Item not found</value>
  </data>
  <data name="Numbers" xml:space="preserve">
    <value>Números</value>
  </data>
  <data name="NumbersInSequence" xml:space="preserve">
    <value>Números en secuencia</value>
  </data>
  <data name="NumbersLoto6" xml:space="preserve">
    <value>Introduce una lista de 6 números entre 01 y 43 separados por una coma</value>
  </data>
  <data name="NumbersLoto7" xml:space="preserve">
    <value>Introduce una lista de 7 números entre 01 y 37 separados por una coma</value>
  </data>
  <data name="NumbersMiniLoto" xml:space="preserve">
    <value>Introduce una lista de números separados por comas</value>
  </data>
  <data name="NumbersPerColumn" xml:space="preserve">
    <value>Números por columna</value>
  </data>
  <data name="NumbersPerLine" xml:space="preserve">
    <value>Números por fila</value>
  </data>
  <data name="OddNumbers" xml:space="preserve">
    <value>Números impares</value>
  </data>
  <data name="OperationError" xml:space="preserve">
    <value>Operation error</value>
  </data>
  <data name="Order" xml:space="preserve">
    <value>#Orden</value>
  </data>
  <data name="Page" xml:space="preserve">
    <value>Pág:</value>
  </data>
  <data name="PageFirst" xml:space="preserve">
    <value>Primera página</value>
  </data>
  <data name="PageLast" xml:space="preserve">
    <value>Última página</value>
  </data>
  <data name="PageNext" xml:space="preserve">
    <value>Página siguiente</value>
  </data>
  <data name="PagePrevious" xml:space="preserve">
    <value>Página anterior</value>
  </data>
  <data name="PreviousCombinations" xml:space="preserve">
    <value>Combinaciones anteriores</value>
  </data>
  <data name="PrimeNumbers" xml:space="preserve">
    <value>Números primos</value>
  </data>
  <data name="Print" xml:space="preserve">
    <value>Imprimir</value>
  </data>
  <data name="RandomCombinations" xml:space="preserve">
    <value>Combinaciones aleatorias</value>
  </data>
  <data name="Recycle" xml:space="preserve">
    <value>Reciclar</value>
  </data>
  <data name="RecycleItem" xml:space="preserve">
    <value>Reciclar elemento</value>
  </data>
  <data name="Restore" xml:space="preserve">
    <value>Restaurar</value>
  </data>
  <data name="RestoreItem" xml:space="preserve">
    <value>Restaurar elemento</value>
  </data>
  <data name="Results" xml:space="preserve">
    <value>Resultados</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Guardar</value>
  </data>
  <data name="SelectDiretory" xml:space="preserve">
    <value>Guardar en</value>
  </data>
  <data name="Suggestions" xml:space="preserve">
    <value>Sugerencias</value>
  </data>
  <data name="TITLE_COMBINATIONS" xml:space="preserve">
    <value>Generar Combinaciones</value>
  </data>
  <data name="TITLE_CONFIGURE_PRINTING" xml:space="preserve">
    <value>Configurar Impresión</value>
  </data>
  <data name="TITLE_FILTERS" xml:space="preserve">
    <value>Configurar Filtros</value>
  </data>
  <data name="TITLE_LOTO6" xml:space="preserve">
    <value>Loto 6</value>
  </data>
  <data name="TITLE_LOTO7" xml:space="preserve">
    <value>Loto 7</value>
  </data>
  <data name="TITLE_MINILOTO" xml:space="preserve">
    <value>Mini Loto</value>
  </data>
  <data name="TITLE_RESULTS" xml:space="preserve">
    <value>Resultados</value>
  </data>
  <data name="TITLE_SELECTNUMBERS" xml:space="preserve">
    <value>Seleccionar Números</value>
  </data>
  <data name="UpdateSuccess" xml:space="preserve">
    <value>Item updateed successfully</value>
  </data>
</root>