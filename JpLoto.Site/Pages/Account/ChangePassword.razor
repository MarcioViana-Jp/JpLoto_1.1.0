@page "/changepassword"
@inject IAccountService accountService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Change Password</PageTitle>

<h3>Change Password</h3>

<EditForm Model="changePasswordRequest" OnValidSubmit="HandleChangePassword">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="senha">CurrentPassword</label>
        <InputText id="senha" @bind-Value="changePasswordRequest.SenhaAtual" class="form-control" type="password" />
        <ValidationMessage For="@(() => changePasswordRequest.SenhaAtual)" />
    </div>
    <div class="mb-3">
        <label for="senha">NewPassword</label>
        <InputText id="senha" @bind-Value="changePasswordRequest.NovaSenha" class="form-control" type="password" />
        <ValidationMessage For="@(() => changePasswordRequest.NovaSenha)" />
    </div>
    <div class="mb-3">
        <label for="senhaConfirmacao">Confirm password</label>
        <InputText id="senhaConfirmacao" @bind-Value="changePasswordRequest.SenhaConfirmacao" class="form-control" type="password" />
        <ValidationMessage For="@(() => changePasswordRequest.SenhaConfirmacao)" />
    </div>
    <button type="submit" class="btn btn-primary">Update password</button>
    <p><a class="btn btn-link" href="/">Or click here to return.</a></p>
</EditForm>

<div class="mt-2 text-danger">
    @if (errorMessages.Count > 0)
    {
        foreach (var msg in errorMessages)
        {
            <label>@msg</label>
            <br />
        }
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private async Task<bool> IsAuthenticated() => (await authenticationStateTask).User.Identity.IsAuthenticated;

    //private async Task<bool> IsSupportAuthenticated() => (await authenticationStateTask).User.IsInRole("Support");

    private ChangePasswordRequestApplication changePasswordRequest = new();
    private List<string> errorMessages = new();
    private string returnUrl = string.Empty;
    private string userName { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task<string> GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            return user.FindFirst(c => c.Type == "name")?.Value;
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task HandleChangePassword()
    {
        errorMessages = new();
        if(await accountService.IsUserAuthenticated())
        {
            changePasswordRequest.UserName = await GetCurrentUser();
            var response = await accountService.ChangePassword(changePasswordRequest);
            if (response.Sucesso)
                navigationManager.NavigateTo(returnUrl);
            else            
                errorMessages = response.Erros;
        }
        else
            errorMessages.Add("Usuário não logado no momento. - 2o IF");
    }

}
