@page "/login"
@inject IAccountService accountService
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<AuthResource> authLocalizer

<PageTitle>Login</PageTitle>

<main class="main-content">
    <div class="page-header align-items-start min-vh-60" style="background-image: url('site_images/backgrounds/lottery-3846567_640.webp.jpg');">
        <span class="mask bg-gradient-dark opacity-6"></span>
        <div class="container my-auto mb-7">
            <div class="row">
                <div class="col-lg-4 col-md-8 col-12 mx-auto">
                    <div class="card mt-7 z-index-0 fadeIn3 fadeInBottom">
                        <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                            <div class="bg-gradient-primary shadow-primary border-radius-lg py-3 pe-1">
                                <h4 class="text-white font-weight-bolder text-center mt-2 mb-0">@authLocalizer["_LOGIN_TITLE"]</h4>
                            </div>
                        </div>
                        <div class="card-body">
                            @* <form role="form" class="text-start"> *@
                            <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                                <DataAnnotationsValidator />
                                <div class="input-group input-group-outline mt-3">
                                    <label for="email" class="form-label text-xs">@authLocalizer["Email"]</label>
                                    <InputText id="email" type="email" style="text-align:center;" @bind-Value="loginRequest.Email" class="form-control my-2" />
                                </div>
                                <ValidationMessage For="@(() => loginRequest.Email)" class="text-xs text-danger" />
                                <div class="input-group input-group-outline mt-2">
                                    <label for="Password" class="form-label text-xs">@authLocalizer["Password"]</label>
                                    <InputText id="Password" type="password" style="text-align:center;" @bind-Value="loginRequest.Password" class="form-control my-2" />
                                </div>
                                <ValidationMessage For="@(() => loginRequest.Password)" class="text-xs text-danger" />
                                <div class="form-check form-switch d-flex align-items-center mt-2">
                                    <InputCheckbox @bind-Value="loginRequest.IsPersistent" 
                                           class="form-check-input" type="checkbox" id="rememberMe" checked />                                    
                                    <label class="form-check-label mb-0 ms-3" for="rememberMe">@authLocalizer["IsPersistent"]</label>
                                </div>
                                <div class="text-center">
                                    <button type="submit" class="btn bg-gradient-primary w-100 my-4 mb-2">@authLocalizer["Login"]</button>
                                </div>
                                <p class="mt-4 text-xs text-center">
                                    @authLocalizer["NotRegistered"]?
                                    <a href="/register" class="text-xs text-primary text-gradient font-weight-bold">@authLocalizer["RegisterForFree"]</a>
                                </p>
                                <p class="mt-1 text-xs text-center">
                                    @authLocalizer["ResendConfirmationEmail"]?
                                    <a href="/resendemail" class="text-xs text-primary text-gradient font-weight-bold">@authLocalizer["ClickHere"]</a>
                                </p>
                                <p class="mt-1 text-xs text-center">
                                    <a href="@returnUrl" class="text-xs text-primary text-gradient font-weight-bold">@authLocalizer["ClickHereToReturn"]</a>
                                </p>
                            </EditForm>
                            <div class="mt-2">
                                @if (errorMessages.Count > 0)
                                {
                                    foreach (var msg in errorMessages)
                                    {
                                        <label class="text-danger text-xs">@msg</label>
                                        <br />
                                    }
                                }
                            </div>
                            @* </form> *@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    private LoginRequest loginRequest = new();
    private List<string> errorMessages = new();
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        errorMessages = new();

        var response = await accountService.Login(loginRequest);
        if (response.Success)
        {
            await localStorage.SetItemAsync("authToken", response.AccessToken);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (await accountService.IsUserAuthenticated())
                errorMessages = new() { "Usuário não logado no momento.- 1o IF" };
            navigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessages = response.Errors;
        }
    }

}


